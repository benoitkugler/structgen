package test

import "encoding/json"

// Code generated by structgen/interfaces. DO NOT EDIT

// union1Wrapper may be used as replacements for union1
// when working with JSON
type union1Wrapper struct {
	data union1
}

func (out *union1Wrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data member1
		err = json.Unmarshal(wr.Data, &data)
		out.data = data
	case 1:
		var data member2
		err = json.Unmarshal(wr.Data, &data)
		out.data = data
	case 2:
		var data member3
		err = json.Unmarshal(wr.Data, &data)
		out.data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item union1Wrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.data.(type) {
	case member1:
		wr = wrapper{Kind: 0, Data: data}
	case member2:
		wr = wrapper{Kind: 1, Data: data}
	case member3:
		wr = wrapper{Kind: 2, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

// union2Wrapper may be used as replacements for union2
// when working with JSON
type union2Wrapper struct {
	data union2
}

func (out *union2Wrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data member1
		err = json.Unmarshal(wr.Data, &data)
		out.data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item union2Wrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.data.(type) {
	case member1:
		wr = wrapper{Kind: 0, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}
