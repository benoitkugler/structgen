package composites

import (
	"bytes"
	"fmt"
	"go/types"

	"github.com/benoitkugler/structgen/loader"
	"github.com/benoitkugler/structgen/orm"
)

const PackageComposites = "composites"

var _ loader.Handler = &Composites{} // interface conformity

// Composites create composite types
// and scans function, and write it in a separate package
type Composites struct {
	// package types where extracted from
	OriginPackageName string

	tables []orm.GoSQLTable
}

func (l Composites) Header() string {
	return fmt.Sprintf(`
	// DON'T EDIT - automatically generated by structgen //

	package %s

	import "database/sql"

	type scanner interface {
		Scan(...interface{}) error
	}
	
	`, PackageComposites)
}

func (l Composites) Footer() string {
	g := newGraph(l.tables)
	var out bytes.Buffer
	err := g.render(l.OriginPackageName, &out)
	if err != nil {
		panic(err)
	}
	return out.String()
}

func (l *Composites) HandleType(typ types.Type) loader.Type {
	item, isTable := orm.TypeToSQLStruct(typ, nil)
	if isTable {
		l.tables = append(l.tables, item)
	}

	return nil // all the logic is implemented in Footer()
}

func (l Composites) HandleComment(comment loader.Comment) error { return nil }
