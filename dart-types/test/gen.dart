// Code generated by structgen. DO NOT EDIT

import 'extern.dart';

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

List<int> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<int> item) {
  return item.map(intToJson).toList();
}

// github.com/benoitkugler/structgen/dart-types/test.concret1
class Concret1 implements ItfName {
  final List<int> list2;
  final int v;

  const Concret1(this.list2, this.v);

  @override
  String toString() {
    return "Concret1($list2, $v)";
  }
}

Concret1 concret1FromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Concret1(listIntFromJson(json['List2']), intFromJson(json['V']));
}

JSON concret1ToJson(Concret1 item) {
  return {"List2": listIntToJson(item.list2), "V": intToJson(item.v)};
}

double doubleFromJson(dynamic json) => (json as num).toDouble();

double doubleToJson(double item) => item;

// github.com/benoitkugler/structgen/dart-types/test.concret2
class Concret2 implements ItfName {
  final double d;

  const Concret2(this.d);

  @override
  String toString() {
    return "Concret2($d)";
  }
}

Concret2 concret2FromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Concret2(doubleFromJson(json['D']));
}

JSON concret2ToJson(Concret2 item) {
  return {"D": doubleToJson(item.d)};
}

abstract class ItfName {}

ItfName itfNameFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return concret1FromJson(data);
    case 1:
      return concret2FromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON itfNameToJson(ItfName item) {
  if (item is Concret1) {
    return {'Kind': 0, 'Data': concret1ToJson(item)};
  } else if (item is Concret2) {
    return {'Kind': 1, 'Data': concret2ToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

List<ItfName> listItfNameFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(itfNameFromJson).toList();
}

List<dynamic> listItfNameToJson(List<ItfName> item) {
  return item.map(itfNameToJson).toList();
}

// github.com/benoitkugler/structgen/dart-types/test.ListV
typedef ListV = List<ItfName>;

String stringFromJson(dynamic json) => json as String;

String stringToJson(String item) => item;

Map<int, int> dictIntIntFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON).map((k, v) => MapEntry(int.parse(k), intFromJson(v)));
}

Map<String, dynamic> dictIntIntToJson(Map<int, int> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), intToJson(v)));
}

// github.com/benoitkugler/structgen/dart-types/test.model
class Model {
  final ItfName value;
  final int a;
  final String b;
  final ListV l;
  final Map<int, int> dict;

  const Model(this.value, this.a, this.b, this.l, this.dict);

  @override
  String toString() {
    return "Model($value, $a, $b, $l, $dict)";
  }
}

Model modelFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Model(
      itfNameFromJson(json['Value']),
      intFromJson(json['A']),
      stringFromJson(json['B']),
      listItfNameFromJson(json['L']),
      dictIntIntFromJson(json['Dict']));
}

JSON modelToJson(Model item) {
  return {
    "Value": itfNameToJson(item.value),
    "A": intToJson(item.a),
    "B": stringToJson(item.b),
    "L": listItfNameToJson(item.l),
    "Dict": dictIntIntToJson(item.dict)
  };
}

List<Node> listNodeFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(nodeFromJson).toList();
}

List<dynamic> listNodeToJson(List<Node> item) {
  return item.map(nodeToJson).toList();
}

// github.com/benoitkugler/structgen/dart-types/test.node
class Node {
  final List<Node> children;

  const Node(this.children);

  @override
  String toString() {
    return "Node($children)";
  }
}

Node nodeFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Node(listNodeFromJson(json['Children']));
}

JSON nodeToJson(Node item) {
  return {"Children": listNodeToJson(item.children)};
}

// github.com/benoitkugler/structgen/dart-types/test.withExternalRef
class WithExternalRef {
  final Context field1;
  final Context field2;

  const WithExternalRef(this.field1, this.field2);

  @override
  String toString() {
    return "WithExternalRef($field1, $field2)";
  }
}

WithExternalRef withExternalRefFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return WithExternalRef(
      contextFromJson(json['Field1']), contextFromJson(json['Field2']));
}

JSON withExternalRefToJson(WithExternalRef item) {
  return {
    "Field1": contextToJson(item.field1),
    "Field2": contextToJson(item.field2)
  };
}
